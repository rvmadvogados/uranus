//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Taylor.Data
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    using Taylor.Domain;
    
    public partial class TaylorEntities : DbContext
    {
        public TaylorEntities()
            : base("name=TaylorEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Areas> Areas { get; set; }
        public virtual DbSet<Atributos> Atributos { get; set; }
        public virtual DbSet<AtributosTipos> AtributosTipos { get; set; }
        public virtual DbSet<Bancos> Bancos { get; set; }
        public virtual DbSet<BancosLancamentos> BancosLancamentos { get; set; }
        public virtual DbSet<Caixas> Caixas { get; set; }
        public virtual DbSet<Categorias> Categorias { get; set; }
        public virtual DbSet<Classes> Classes { get; set; }
        public virtual DbSet<Clientes> Clientes { get; set; }
        public virtual DbSet<ClientesChamados> ClientesChamados { get; set; }
        public virtual DbSet<ClientesChamadosFormaPagamentos> ClientesChamadosFormaPagamentos { get; set; }
        public virtual DbSet<ClientesEmails> ClientesEmails { get; set; }
        public virtual DbSet<ClientesEnderecos> ClientesEnderecos { get; set; }
        public virtual DbSet<ClientesFones> ClientesFones { get; set; }
        public virtual DbSet<ClientesHistoricosCadastros> ClientesHistoricosCadastros { get; set; }
        public virtual DbSet<ClientesHistoricosTipos> ClientesHistoricosTipos { get; set; }
        public virtual DbSet<ClientesNotas> ClientesNotas { get; set; }
        public virtual DbSet<ClientesOrcamentosParcelas> ClientesOrcamentosParcelas { get; set; }
        public virtual DbSet<ClientesTrocaDevolucoes> ClientesTrocaDevolucoes { get; set; }
        public virtual DbSet<ClientesTrocas> ClientesTrocas { get; set; }
        public virtual DbSet<ClientesTrocaVendas> ClientesTrocaVendas { get; set; }
        public virtual DbSet<CondicoesPagamentos> CondicoesPagamentos { get; set; }
        public virtual DbSet<ConfiguracõsBanco> ConfiguracõsBanco { get; set; }
        public virtual DbSet<Cupom> Cupom { get; set; }
        public virtual DbSet<EmpresasTipo> EmpresasTipo { get; set; }
        public virtual DbSet<Fabricantes> Fabricantes { get; set; }
        public virtual DbSet<Feriados> Feriados { get; set; }
        public virtual DbSet<FormaPagamentos> FormaPagamentos { get; set; }
        public virtual DbSet<Fornecedores> Fornecedores { get; set; }
        public virtual DbSet<FornecedoresCotacoes> FornecedoresCotacoes { get; set; }
        public virtual DbSet<FornecedoresCotacoesProdutos> FornecedoresCotacoesProdutos { get; set; }
        public virtual DbSet<FornecedoresNotasEntradas> FornecedoresNotasEntradas { get; set; }
        public virtual DbSet<FornecedoresNotasEntradasParcelas> FornecedoresNotasEntradasParcelas { get; set; }
        public virtual DbSet<FornecedoresNotasEntradasProdutos> FornecedoresNotasEntradasProdutos { get; set; }
        public virtual DbSet<FornecedoresNotasParcelas> FornecedoresNotasParcelas { get; set; }
        public virtual DbSet<FornecedoresOrdemCompras> FornecedoresOrdemCompras { get; set; }
        public virtual DbSet<FornecedoresOrdemComprasProdutos> FornecedoresOrdemComprasProdutos { get; set; }
        public virtual DbSet<Funcionarios> Funcionarios { get; set; }
        public virtual DbSet<FuncionariosFuncoes> FuncionariosFuncoes { get; set; }
        public virtual DbSet<Historicos> Historicos { get; set; }
        public virtual DbSet<IBPTaxas> IBPTaxas { get; set; }
        public virtual DbSet<ListaOrcamento> ListaOrcamento { get; set; }
        public virtual DbSet<Modalidades> Modalidades { get; set; }
        public virtual DbSet<Municipios> Municipios { get; set; }
        public virtual DbSet<Mvas> Mvas { get; set; }
        public virtual DbSet<NaturezaOperacoes> NaturezaOperacoes { get; set; }
        public virtual DbSet<Notas> Notas { get; set; }
        public virtual DbSet<NotasFiscaisParcelas> NotasFiscaisParcelas { get; set; }
        public virtual DbSet<NotasFiscaisPedidos> NotasFiscaisPedidos { get; set; }
        public virtual DbSet<NotasFiscaisProdutos> NotasFiscaisProdutos { get; set; }
        public virtual DbSet<NotasFiscaisReferenciadas> NotasFiscaisReferenciadas { get; set; }
        public virtual DbSet<NotasImportacao> NotasImportacao { get; set; }
        public virtual DbSet<NotasServicos> NotasServicos { get; set; }
        public virtual DbSet<NotasServicosParcelas> NotasServicosParcelas { get; set; }
        public virtual DbSet<Pessoas> Pessoas { get; set; }
        public virtual DbSet<PessoasEmail> PessoasEmail { get; set; }
        public virtual DbSet<PessoasFones> PessoasFones { get; set; }
        public virtual DbSet<ProdutosEstoques> ProdutosEstoques { get; set; }
        public virtual DbSet<ProdutosEstoquesLojas> ProdutosEstoquesLojas { get; set; }
        public virtual DbSet<ProdutosFamilias> ProdutosFamilias { get; set; }
        public virtual DbSet<ProdutosFinanceiros> ProdutosFinanceiros { get; set; }
        public virtual DbSet<ProdutosGrupos> ProdutosGrupos { get; set; }
        public virtual DbSet<ProdutosItens> ProdutosItens { get; set; }
        public virtual DbSet<ProdutosItensKits> ProdutosItensKits { get; set; }
        public virtual DbSet<Profissionais> Profissionais { get; set; }
        public virtual DbSet<Servicos> Servicos { get; set; }
        public virtual DbSet<Settings> Settings { get; set; }
        public virtual DbSet<Status> Status { get; set; }
        public virtual DbSet<Transportadoras> Transportadoras { get; set; }
        public virtual DbSet<Veiculos> Veiculos { get; set; }
        public virtual DbSet<Vendedores> Vendedores { get; set; }
        public virtual DbSet<SystematicParameterizations> SystematicParameterizations { get; set; }
        public virtual DbSet<ConsultaProduto> ConsultaProduto { get; set; }
        public virtual DbSet<CupomFiscal> CupomFiscal { get; set; }
        public virtual DbSet<ClientesReclamacoes> ClientesReclamacoes { get; set; }
        public virtual DbSet<ClientesHistoricos> ClientesHistoricos { get; set; }
        public virtual DbSet<NotasFiscais> NotasFiscais { get; set; }
        public virtual DbSet<Empresas> Empresas { get; set; }
        public virtual DbSet<Usuarios> Usuarios { get; set; }
        public virtual DbSet<UsuariosTipoNivel> UsuariosTipoNivel { get; set; }
        public virtual DbSet<ClientesOrcamentosOS> ClientesOrcamentosOS { get; set; }
        public virtual DbSet<ClientesOrcamentosOSProdutos> ClientesOrcamentosOSProdutos { get; set; }
        public virtual DbSet<ClientesOrcamentosOSServicos> ClientesOrcamentosOSServicos { get; set; }
        public virtual DbSet<Bandeiras> Bandeiras { get; set; }
        public virtual DbSet<Credenciadoras> Credenciadoras { get; set; }
        public virtual DbSet<FornecedoresEmail> FornecedoresEmail { get; set; }
        public virtual DbSet<FornecedoresFones> FornecedoresFones { get; set; }
        public virtual DbSet<Produtos> Produtos { get; set; }
        public virtual DbSet<ProdutosFornecedores> ProdutosFornecedores { get; set; }
        public virtual DbSet<Configuracoes> Configuracoes { get; set; }
        public virtual DbSet<ClientesPedidosParcelas> ClientesPedidosParcelas { get; set; }
        public virtual DbSet<ClientesPedidosProdutos> ClientesPedidosProdutos { get; set; }
        public virtual DbSet<ClientesServicos> ClientesServicos { get; set; }
        public virtual DbSet<ClientesServicosParcelas> ClientesServicosParcelas { get; set; }
        public virtual DbSet<ClientesServicosServicos> ClientesServicosServicos { get; set; }
        public virtual DbSet<ClientesContratosParcelas> ClientesContratosParcelas { get; set; }
        public virtual DbSet<FornecedoresContratos> FornecedoresContratos { get; set; }
        public virtual DbSet<ClientesServicosProdutos> ClientesServicosProdutos { get; set; }
        public virtual DbSet<FinanceiroTipo> FinanceiroTipo { get; set; }
        public virtual DbSet<FornecedoresLancamentos> FornecedoresLancamentos { get; set; }
        public virtual DbSet<FornecedoresLancamentosParcelas> FornecedoresLancamentosParcelas { get; set; }
        public virtual DbSet<ClientesOrcamentos> ClientesOrcamentos { get; set; }
        public virtual DbSet<ClientesNotasParcelas> ClientesNotasParcelas { get; set; }
        public virtual DbSet<FornecedoresNotas> FornecedoresNotas { get; set; }
        public virtual DbSet<ClientesPedidos> ClientesPedidos { get; set; }
        public virtual DbSet<ClientesOrcamentosProdutos> ClientesOrcamentosProdutos { get; set; }
        public virtual DbSet<ClientesContratos> ClientesContratos { get; set; }
    
        [DbFunction("TaylorEntities", "fnCaixa")]
        public virtual IQueryable<fnCaixa_Result> fnCaixa(Nullable<System.DateTime> dataInicial, Nullable<System.DateTime> dataFinal)
        {
            var dataInicialParameter = dataInicial.HasValue ?
                new ObjectParameter("dataInicial", dataInicial) :
                new ObjectParameter("dataInicial", typeof(System.DateTime));
    
            var dataFinalParameter = dataFinal.HasValue ?
                new ObjectParameter("dataFinal", dataFinal) :
                new ObjectParameter("dataFinal", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnCaixa_Result>("[TaylorEntities].[fnCaixa](@dataInicial, @dataFinal)", dataInicialParameter, dataFinalParameter);
        }
    
        [DbFunction("TaylorEntities", "fnCaixaVendas")]
        public virtual IQueryable<fnCaixaVendas_Result> fnCaixaVendas(Nullable<System.DateTime> dataInicial, Nullable<System.DateTime> dataFinal, Nullable<int> loja)
        {
            var dataInicialParameter = dataInicial.HasValue ?
                new ObjectParameter("DataInicial", dataInicial) :
                new ObjectParameter("DataInicial", typeof(System.DateTime));
    
            var dataFinalParameter = dataFinal.HasValue ?
                new ObjectParameter("DataFinal", dataFinal) :
                new ObjectParameter("DataFinal", typeof(System.DateTime));
    
            var lojaParameter = loja.HasValue ?
                new ObjectParameter("Loja", loja) :
                new ObjectParameter("Loja", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnCaixaVendas_Result>("[TaylorEntities].[fnCaixaVendas](@DataInicial, @DataFinal, @Loja)", dataInicialParameter, dataFinalParameter, lojaParameter);
        }
    
        [DbFunction("TaylorEntities", "fnCaixaVendasTotal")]
        public virtual IQueryable<Nullable<decimal>> fnCaixaVendasTotal(Nullable<System.DateTime> dataInicial, Nullable<System.DateTime> dataFinal, Nullable<int> loja, string nota)
        {
            var dataInicialParameter = dataInicial.HasValue ?
                new ObjectParameter("DataInicial", dataInicial) :
                new ObjectParameter("DataInicial", typeof(System.DateTime));
    
            var dataFinalParameter = dataFinal.HasValue ?
                new ObjectParameter("DataFinal", dataFinal) :
                new ObjectParameter("DataFinal", typeof(System.DateTime));
    
            var lojaParameter = loja.HasValue ?
                new ObjectParameter("Loja", loja) :
                new ObjectParameter("Loja", typeof(int));
    
            var notaParameter = nota != null ?
                new ObjectParameter("Nota", nota) :
                new ObjectParameter("Nota", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Nullable<decimal>>("[TaylorEntities].[fnCaixaVendasTotal](@DataInicial, @DataFinal, @Loja, @Nota)", dataInicialParameter, dataFinalParameter, lojaParameter, notaParameter);
        }
    
        [DbFunction("TaylorEntities", "fnPagarRolPagamentos")]
        public virtual IQueryable<fnPagarRolPagamentos_Result> fnPagarRolPagamentos(Nullable<int> idEmpresa, Nullable<System.DateTime> dataInicial, Nullable<System.DateTime> dataFinal)
        {
            var idEmpresaParameter = idEmpresa.HasValue ?
                new ObjectParameter("IdEmpresa", idEmpresa) :
                new ObjectParameter("IdEmpresa", typeof(int));
    
            var dataInicialParameter = dataInicial.HasValue ?
                new ObjectParameter("dataInicial", dataInicial) :
                new ObjectParameter("dataInicial", typeof(System.DateTime));
    
            var dataFinalParameter = dataFinal.HasValue ?
                new ObjectParameter("dataFinal", dataFinal) :
                new ObjectParameter("dataFinal", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnPagarRolPagamentos_Result>("[TaylorEntities].[fnPagarRolPagamentos](@IdEmpresa, @dataInicial, @dataFinal)", idEmpresaParameter, dataInicialParameter, dataFinalParameter);
        }
    
        [DbFunction("TaylorEntities", "fnRelatorioMovimentoEstoque")]
        public virtual IQueryable<fnRelatorioMovimentoEstoque_Result> fnRelatorioMovimentoEstoque(Nullable<System.DateTime> dataInicio, Nullable<System.DateTime> dataFim, string codigoProduto, Nullable<int> empresa)
        {
            var dataInicioParameter = dataInicio.HasValue ?
                new ObjectParameter("DataInicio", dataInicio) :
                new ObjectParameter("DataInicio", typeof(System.DateTime));
    
            var dataFimParameter = dataFim.HasValue ?
                new ObjectParameter("DataFim", dataFim) :
                new ObjectParameter("DataFim", typeof(System.DateTime));
    
            var codigoProdutoParameter = codigoProduto != null ?
                new ObjectParameter("CodigoProduto", codigoProduto) :
                new ObjectParameter("CodigoProduto", typeof(string));
    
            var empresaParameter = empresa.HasValue ?
                new ObjectParameter("Empresa", empresa) :
                new ObjectParameter("Empresa", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnRelatorioMovimentoEstoque_Result>("[TaylorEntities].[fnRelatorioMovimentoEstoque](@DataInicio, @DataFim, @CodigoProduto, @Empresa)", dataInicioParameter, dataFimParameter, codigoProdutoParameter, empresaParameter);
        }
    
        [DbFunction("TaylorEntities", "fnRelatorioOrcamentos")]
        public virtual IQueryable<fnRelatorioOrcamentos_Result> fnRelatorioOrcamentos(Nullable<int> idEmpresa, Nullable<int> idVendedor, Nullable<System.DateTime> dataInicial, Nullable<System.DateTime> dataFinal)
        {
            var idEmpresaParameter = idEmpresa.HasValue ?
                new ObjectParameter("IdEmpresa", idEmpresa) :
                new ObjectParameter("IdEmpresa", typeof(int));
    
            var idVendedorParameter = idVendedor.HasValue ?
                new ObjectParameter("IdVendedor", idVendedor) :
                new ObjectParameter("IdVendedor", typeof(int));
    
            var dataInicialParameter = dataInicial.HasValue ?
                new ObjectParameter("dataInicial", dataInicial) :
                new ObjectParameter("dataInicial", typeof(System.DateTime));
    
            var dataFinalParameter = dataFinal.HasValue ?
                new ObjectParameter("dataFinal", dataFinal) :
                new ObjectParameter("dataFinal", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnRelatorioOrcamentos_Result>("[TaylorEntities].[fnRelatorioOrcamentos](@IdEmpresa, @IdVendedor, @dataInicial, @dataFinal)", idEmpresaParameter, idVendedorParameter, dataInicialParameter, dataFinalParameter);
        }
    
        [DbFunction("TaylorEntities", "fnRelatorioPedidos")]
        public virtual IQueryable<fnRelatorioPedidos_Result> fnRelatorioPedidos(Nullable<int> idEmpresa, Nullable<int> idVendedor, Nullable<System.DateTime> dataInicial, Nullable<System.DateTime> dataFinal)
        {
            var idEmpresaParameter = idEmpresa.HasValue ?
                new ObjectParameter("IdEmpresa", idEmpresa) :
                new ObjectParameter("IdEmpresa", typeof(int));
    
            var idVendedorParameter = idVendedor.HasValue ?
                new ObjectParameter("IdVendedor", idVendedor) :
                new ObjectParameter("IdVendedor", typeof(int));
    
            var dataInicialParameter = dataInicial.HasValue ?
                new ObjectParameter("dataInicial", dataInicial) :
                new ObjectParameter("dataInicial", typeof(System.DateTime));
    
            var dataFinalParameter = dataFinal.HasValue ?
                new ObjectParameter("dataFinal", dataFinal) :
                new ObjectParameter("dataFinal", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnRelatorioPedidos_Result>("[TaylorEntities].[fnRelatorioPedidos](@IdEmpresa, @IdVendedor, @dataInicial, @dataFinal)", idEmpresaParameter, idVendedorParameter, dataInicialParameter, dataFinalParameter);
        }
    
        [DbFunction("TaylorEntities", "fnRelatorioProdutos")]
        public virtual IQueryable<fnRelatorioProdutos_Result> fnRelatorioProdutos(Nullable<int> idEmpresa, string codigoProduto, Nullable<int> estoque)
        {
            var idEmpresaParameter = idEmpresa.HasValue ?
                new ObjectParameter("IdEmpresa", idEmpresa) :
                new ObjectParameter("IdEmpresa", typeof(int));
    
            var codigoProdutoParameter = codigoProduto != null ?
                new ObjectParameter("CodigoProduto", codigoProduto) :
                new ObjectParameter("CodigoProduto", typeof(string));
    
            var estoqueParameter = estoque.HasValue ?
                new ObjectParameter("Estoque", estoque) :
                new ObjectParameter("Estoque", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnRelatorioProdutos_Result>("[TaylorEntities].[fnRelatorioProdutos](@IdEmpresa, @CodigoProduto, @Estoque)", idEmpresaParameter, codigoProdutoParameter, estoqueParameter);
        }
    
        [DbFunction("TaylorEntities", "PagarEmAbertoEmissao")]
        public virtual IQueryable<PagarEmAbertoEmissao_Result> PagarEmAbertoEmissao(Nullable<System.DateTime> dataInicial, Nullable<System.DateTime> dataFinal)
        {
            var dataInicialParameter = dataInicial.HasValue ?
                new ObjectParameter("dataInicial", dataInicial) :
                new ObjectParameter("dataInicial", typeof(System.DateTime));
    
            var dataFinalParameter = dataFinal.HasValue ?
                new ObjectParameter("dataFinal", dataFinal) :
                new ObjectParameter("dataFinal", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<PagarEmAbertoEmissao_Result>("[TaylorEntities].[PagarEmAbertoEmissao](@dataInicial, @dataFinal)", dataInicialParameter, dataFinalParameter);
        }
    
        [DbFunction("TaylorEntities", "PagarEmAbertoVencimento")]
        public virtual IQueryable<PagarEmAbertoVencimento_Result> PagarEmAbertoVencimento(Nullable<System.DateTime> dataInicial, Nullable<System.DateTime> dataFinal)
        {
            var dataInicialParameter = dataInicial.HasValue ?
                new ObjectParameter("dataInicial", dataInicial) :
                new ObjectParameter("dataInicial", typeof(System.DateTime));
    
            var dataFinalParameter = dataFinal.HasValue ?
                new ObjectParameter("dataFinal", dataFinal) :
                new ObjectParameter("dataFinal", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<PagarEmAbertoVencimento_Result>("[TaylorEntities].[PagarEmAbertoVencimento](@dataInicial, @dataFinal)", dataInicialParameter, dataFinalParameter);
        }
    
        [DbFunction("TaylorEntities", "PagarPagas")]
        public virtual IQueryable<PagarPagas_Result> PagarPagas(Nullable<System.DateTime> dataInicial, Nullable<System.DateTime> dataFinal)
        {
            var dataInicialParameter = dataInicial.HasValue ?
                new ObjectParameter("dataInicial", dataInicial) :
                new ObjectParameter("dataInicial", typeof(System.DateTime));
    
            var dataFinalParameter = dataFinal.HasValue ?
                new ObjectParameter("dataFinal", dataFinal) :
                new ObjectParameter("dataFinal", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<PagarPagas_Result>("[TaylorEntities].[PagarPagas](@dataInicial, @dataFinal)", dataInicialParameter, dataFinalParameter);
        }
    
        [DbFunction("TaylorEntities", "ReceberEmAbertoEmissao")]
        public virtual IQueryable<ReceberEmAbertoEmissao_Result> ReceberEmAbertoEmissao(Nullable<System.DateTime> dataInicial, Nullable<System.DateTime> dataFinal)
        {
            var dataInicialParameter = dataInicial.HasValue ?
                new ObjectParameter("dataInicial", dataInicial) :
                new ObjectParameter("dataInicial", typeof(System.DateTime));
    
            var dataFinalParameter = dataFinal.HasValue ?
                new ObjectParameter("dataFinal", dataFinal) :
                new ObjectParameter("dataFinal", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<ReceberEmAbertoEmissao_Result>("[TaylorEntities].[ReceberEmAbertoEmissao](@dataInicial, @dataFinal)", dataInicialParameter, dataFinalParameter);
        }
    
        [DbFunction("TaylorEntities", "ReceberEmAbertoVencimento")]
        public virtual IQueryable<ReceberEmAbertoVencimento_Result> ReceberEmAbertoVencimento(Nullable<System.DateTime> dataInicial, Nullable<System.DateTime> dataFinal)
        {
            var dataInicialParameter = dataInicial.HasValue ?
                new ObjectParameter("dataInicial", dataInicial) :
                new ObjectParameter("dataInicial", typeof(System.DateTime));
    
            var dataFinalParameter = dataFinal.HasValue ?
                new ObjectParameter("dataFinal", dataFinal) :
                new ObjectParameter("dataFinal", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<ReceberEmAbertoVencimento_Result>("[TaylorEntities].[ReceberEmAbertoVencimento](@dataInicial, @dataFinal)", dataInicialParameter, dataFinalParameter);
        }
    
        [DbFunction("TaylorEntities", "ReceberPagas")]
        public virtual IQueryable<ReceberPagas_Result> ReceberPagas(Nullable<System.DateTime> dataInicial, Nullable<System.DateTime> dataFinal)
        {
            var dataInicialParameter = dataInicial.HasValue ?
                new ObjectParameter("dataInicial", dataInicial) :
                new ObjectParameter("dataInicial", typeof(System.DateTime));
    
            var dataFinalParameter = dataFinal.HasValue ?
                new ObjectParameter("dataFinal", dataFinal) :
                new ObjectParameter("dataFinal", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<ReceberPagas_Result>("[TaylorEntities].[ReceberPagas](@dataInicial, @dataFinal)", dataInicialParameter, dataFinalParameter);
        }
    
        public virtual int stpAlteraClientesNotas(Nullable<long> idNota)
        {
            var idNotaParameter = idNota.HasValue ?
                new ObjectParameter("IdNota", idNota) :
                new ObjectParameter("IdNota", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("stpAlteraClientesNotas", idNotaParameter);
        }
    
        public virtual int stpAlteraClientesNotasServicos(Nullable<long> idNota)
        {
            var idNotaParameter = idNota.HasValue ?
                new ObjectParameter("IdNota", idNota) :
                new ObjectParameter("IdNota", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("stpAlteraClientesNotasServicos", idNotaParameter);
        }
    
        public virtual ObjectResult<stpAnaliseEstoque_Result> stpAnaliseEstoque()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<stpAnaliseEstoque_Result>("stpAnaliseEstoque");
        }
    
        public virtual int stpBuscarNossoNumero(Nullable<int> idEmpresa, ObjectParameter param2)
        {
            var idEmpresaParameter = idEmpresa.HasValue ?
                new ObjectParameter("IdEmpresa", idEmpresa) :
                new ObjectParameter("IdEmpresa", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("stpBuscarNossoNumero", idEmpresaParameter, param2);
        }
    
        public virtual int stpCaixaVendas(Nullable<System.DateTime> dataInicial, Nullable<System.DateTime> dataFinal, Nullable<int> loja)
        {
            var dataInicialParameter = dataInicial.HasValue ?
                new ObjectParameter("DataInicial", dataInicial) :
                new ObjectParameter("DataInicial", typeof(System.DateTime));
    
            var dataFinalParameter = dataFinal.HasValue ?
                new ObjectParameter("DataFinal", dataFinal) :
                new ObjectParameter("DataFinal", typeof(System.DateTime));
    
            var lojaParameter = loja.HasValue ?
                new ObjectParameter("Loja", loja) :
                new ObjectParameter("Loja", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("stpCaixaVendas", dataInicialParameter, dataFinalParameter, lojaParameter);
        }
    
        public virtual int stpCaixaVendasFormaPagamentoTotal(Nullable<System.DateTime> dataInicial, Nullable<System.DateTime> dataFinal, Nullable<int> loja)
        {
            var dataInicialParameter = dataInicial.HasValue ?
                new ObjectParameter("DataInicial", dataInicial) :
                new ObjectParameter("DataInicial", typeof(System.DateTime));
    
            var dataFinalParameter = dataFinal.HasValue ?
                new ObjectParameter("DataFinal", dataFinal) :
                new ObjectParameter("DataFinal", typeof(System.DateTime));
    
            var lojaParameter = loja.HasValue ?
                new ObjectParameter("Loja", loja) :
                new ObjectParameter("Loja", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("stpCaixaVendasFormaPagamentoTotal", dataInicialParameter, dataFinalParameter, lojaParameter);
        }
    
        public virtual int stpCaixaVendasTotal(Nullable<System.DateTime> dataInicial, Nullable<System.DateTime> dataFinal, Nullable<int> loja, string nota)
        {
            var dataInicialParameter = dataInicial.HasValue ?
                new ObjectParameter("DataInicial", dataInicial) :
                new ObjectParameter("DataInicial", typeof(System.DateTime));
    
            var dataFinalParameter = dataFinal.HasValue ?
                new ObjectParameter("DataFinal", dataFinal) :
                new ObjectParameter("DataFinal", typeof(System.DateTime));
    
            var lojaParameter = loja.HasValue ?
                new ObjectParameter("Loja", loja) :
                new ObjectParameter("Loja", typeof(int));
    
            var notaParameter = nota != null ?
                new ObjectParameter("Nota", nota) :
                new ObjectParameter("Nota", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("stpCaixaVendasTotal", dataInicialParameter, dataFinalParameter, lojaParameter, notaParameter);
        }
    
        public virtual ObjectResult<stpClientesListar_Result> stpClientesListar(string nome, string cpfCnpj, string endereco, string fone)
        {
            var nomeParameter = nome != null ?
                new ObjectParameter("Nome", nome) :
                new ObjectParameter("Nome", typeof(string));
    
            var cpfCnpjParameter = cpfCnpj != null ?
                new ObjectParameter("CpfCnpj", cpfCnpj) :
                new ObjectParameter("CpfCnpj", typeof(string));
    
            var enderecoParameter = endereco != null ?
                new ObjectParameter("Endereco", endereco) :
                new ObjectParameter("Endereco", typeof(string));
    
            var foneParameter = fone != null ?
                new ObjectParameter("Fone", fone) :
                new ObjectParameter("Fone", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<stpClientesListar_Result>("stpClientesListar", nomeParameter, cpfCnpjParameter, enderecoParameter, foneParameter);
        }
    
        public virtual int stpClientesOrcamentosCalcular(Nullable<long> idOrcamento)
        {
            var idOrcamentoParameter = idOrcamento.HasValue ?
                new ObjectParameter("IdOrcamento", idOrcamento) :
                new ObjectParameter("IdOrcamento", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("stpClientesOrcamentosCalcular", idOrcamentoParameter);
        }
    
        public virtual int stpClientesOrcamentosImportar(Nullable<long> idOrcamento)
        {
            var idOrcamentoParameter = idOrcamento.HasValue ?
                new ObjectParameter("IdOrcamento", idOrcamento) :
                new ObjectParameter("IdOrcamento", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("stpClientesOrcamentosImportar", idOrcamentoParameter);
        }
    
        public virtual int stpClientesOrcamentosProdutosCalcular(Nullable<long> idOrcamento, Nullable<long> id)
        {
            var idOrcamentoParameter = idOrcamento.HasValue ?
                new ObjectParameter("IdOrcamento", idOrcamento) :
                new ObjectParameter("IdOrcamento", typeof(long));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("stpClientesOrcamentosProdutosCalcular", idOrcamentoParameter, idParameter);
        }
    
        public virtual int stpClientesPedidosCalcular(Nullable<long> idPedido)
        {
            var idPedidoParameter = idPedido.HasValue ?
                new ObjectParameter("IdPedido", idPedido) :
                new ObjectParameter("IdPedido", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("stpClientesPedidosCalcular", idPedidoParameter);
        }
    
        public virtual int stpClientesPedidosImportar(Nullable<long> idPedido)
        {
            var idPedidoParameter = idPedido.HasValue ?
                new ObjectParameter("IdPedido", idPedido) :
                new ObjectParameter("IdPedido", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("stpClientesPedidosImportar", idPedidoParameter);
        }
    
        public virtual int stpClientesPedidosProdutosCalcular(Nullable<long> idPedido, Nullable<long> id)
        {
            var idPedidoParameter = idPedido.HasValue ?
                new ObjectParameter("IdPedido", idPedido) :
                new ObjectParameter("IdPedido", typeof(long));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("stpClientesPedidosProdutosCalcular", idPedidoParameter, idParameter);
        }
    
        public virtual int stpClientesServicosCalcular(Nullable<long> idOrdemServico)
        {
            var idOrdemServicoParameter = idOrdemServico.HasValue ?
                new ObjectParameter("IdOrdemServico", idOrdemServico) :
                new ObjectParameter("IdOrdemServico", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("stpClientesServicosCalcular", idOrdemServicoParameter);
        }
    
        public virtual int stpClientesServicosImportar(Nullable<long> idOrdemServico)
        {
            var idOrdemServicoParameter = idOrdemServico.HasValue ?
                new ObjectParameter("IdOrdemServico", idOrdemServico) :
                new ObjectParameter("IdOrdemServico", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("stpClientesServicosImportar", idOrdemServicoParameter);
        }
    
        public virtual int stpClientesServicosProdutosCalcular(Nullable<long> idServico, Nullable<long> id)
        {
            var idServicoParameter = idServico.HasValue ?
                new ObjectParameter("IdServico", idServico) :
                new ObjectParameter("IdServico", typeof(long));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("stpClientesServicosProdutosCalcular", idServicoParameter, idParameter);
        }
    
        public virtual int stpClientesTrocasCalcular(Nullable<long> idTroca)
        {
            var idTrocaParameter = idTroca.HasValue ?
                new ObjectParameter("IdTroca", idTroca) :
                new ObjectParameter("IdTroca", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("stpClientesTrocasCalcular", idTrocaParameter);
        }
    
        public virtual int stpFornecedoresNotasEntradas(Nullable<int> idEmpresa, string cNPJ, string numeroNota, Nullable<System.DateTime> data, Nullable<decimal> totalProdutos, Nullable<decimal> valorDesconto, Nullable<decimal> totalNota, Nullable<decimal> icmBaseCalculo, Nullable<decimal> icmValor, Nullable<decimal> icmBaseCalculoSt, Nullable<decimal> icmValorST, Nullable<decimal> ipiValor, Nullable<decimal> ipiDevolucaoValor, Nullable<decimal> pisValor, Nullable<decimal> cofinsValor, Nullable<decimal> outrosValor, Nullable<decimal> iIValor, Nullable<decimal> seguro, string cNPJTransportadora, string volume, string especie, string pesoLiquido, string pesoBruto, Nullable<int> idStatus, string chaveNFe)
        {
            var idEmpresaParameter = idEmpresa.HasValue ?
                new ObjectParameter("IdEmpresa", idEmpresa) :
                new ObjectParameter("IdEmpresa", typeof(int));
    
            var cNPJParameter = cNPJ != null ?
                new ObjectParameter("CNPJ", cNPJ) :
                new ObjectParameter("CNPJ", typeof(string));
    
            var numeroNotaParameter = numeroNota != null ?
                new ObjectParameter("NumeroNota", numeroNota) :
                new ObjectParameter("NumeroNota", typeof(string));
    
            var dataParameter = data.HasValue ?
                new ObjectParameter("Data", data) :
                new ObjectParameter("Data", typeof(System.DateTime));
    
            var totalProdutosParameter = totalProdutos.HasValue ?
                new ObjectParameter("TotalProdutos", totalProdutos) :
                new ObjectParameter("TotalProdutos", typeof(decimal));
    
            var valorDescontoParameter = valorDesconto.HasValue ?
                new ObjectParameter("ValorDesconto", valorDesconto) :
                new ObjectParameter("ValorDesconto", typeof(decimal));
    
            var totalNotaParameter = totalNota.HasValue ?
                new ObjectParameter("TotalNota", totalNota) :
                new ObjectParameter("TotalNota", typeof(decimal));
    
            var icmBaseCalculoParameter = icmBaseCalculo.HasValue ?
                new ObjectParameter("IcmBaseCalculo", icmBaseCalculo) :
                new ObjectParameter("IcmBaseCalculo", typeof(decimal));
    
            var icmValorParameter = icmValor.HasValue ?
                new ObjectParameter("IcmValor", icmValor) :
                new ObjectParameter("IcmValor", typeof(decimal));
    
            var icmBaseCalculoStParameter = icmBaseCalculoSt.HasValue ?
                new ObjectParameter("IcmBaseCalculoSt", icmBaseCalculoSt) :
                new ObjectParameter("IcmBaseCalculoSt", typeof(decimal));
    
            var icmValorSTParameter = icmValorST.HasValue ?
                new ObjectParameter("IcmValorST", icmValorST) :
                new ObjectParameter("IcmValorST", typeof(decimal));
    
            var ipiValorParameter = ipiValor.HasValue ?
                new ObjectParameter("IpiValor", ipiValor) :
                new ObjectParameter("IpiValor", typeof(decimal));
    
            var ipiDevolucaoValorParameter = ipiDevolucaoValor.HasValue ?
                new ObjectParameter("IpiDevolucaoValor", ipiDevolucaoValor) :
                new ObjectParameter("IpiDevolucaoValor", typeof(decimal));
    
            var pisValorParameter = pisValor.HasValue ?
                new ObjectParameter("PisValor", pisValor) :
                new ObjectParameter("PisValor", typeof(decimal));
    
            var cofinsValorParameter = cofinsValor.HasValue ?
                new ObjectParameter("CofinsValor", cofinsValor) :
                new ObjectParameter("CofinsValor", typeof(decimal));
    
            var outrosValorParameter = outrosValor.HasValue ?
                new ObjectParameter("OutrosValor", outrosValor) :
                new ObjectParameter("OutrosValor", typeof(decimal));
    
            var iIValorParameter = iIValor.HasValue ?
                new ObjectParameter("IIValor", iIValor) :
                new ObjectParameter("IIValor", typeof(decimal));
    
            var seguroParameter = seguro.HasValue ?
                new ObjectParameter("Seguro", seguro) :
                new ObjectParameter("Seguro", typeof(decimal));
    
            var cNPJTransportadoraParameter = cNPJTransportadora != null ?
                new ObjectParameter("CNPJTransportadora", cNPJTransportadora) :
                new ObjectParameter("CNPJTransportadora", typeof(string));
    
            var volumeParameter = volume != null ?
                new ObjectParameter("Volume", volume) :
                new ObjectParameter("Volume", typeof(string));
    
            var especieParameter = especie != null ?
                new ObjectParameter("Especie", especie) :
                new ObjectParameter("Especie", typeof(string));
    
            var pesoLiquidoParameter = pesoLiquido != null ?
                new ObjectParameter("PesoLiquido", pesoLiquido) :
                new ObjectParameter("PesoLiquido", typeof(string));
    
            var pesoBrutoParameter = pesoBruto != null ?
                new ObjectParameter("PesoBruto", pesoBruto) :
                new ObjectParameter("PesoBruto", typeof(string));
    
            var idStatusParameter = idStatus.HasValue ?
                new ObjectParameter("IdStatus", idStatus) :
                new ObjectParameter("IdStatus", typeof(int));
    
            var chaveNFeParameter = chaveNFe != null ?
                new ObjectParameter("ChaveNFe", chaveNFe) :
                new ObjectParameter("ChaveNFe", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("stpFornecedoresNotasEntradas", idEmpresaParameter, cNPJParameter, numeroNotaParameter, dataParameter, totalProdutosParameter, valorDescontoParameter, totalNotaParameter, icmBaseCalculoParameter, icmValorParameter, icmBaseCalculoStParameter, icmValorSTParameter, ipiValorParameter, ipiDevolucaoValorParameter, pisValorParameter, cofinsValorParameter, outrosValorParameter, iIValorParameter, seguroParameter, cNPJTransportadoraParameter, volumeParameter, especieParameter, pesoLiquidoParameter, pesoBrutoParameter, idStatusParameter, chaveNFeParameter);
        }
    
        public virtual int stpFornecedoresNotasEntradasParcelas(Nullable<int> idEmpresa, string cnpj, string numeroNota, Nullable<int> parcela, Nullable<System.DateTime> vencimento, Nullable<decimal> valorParcela)
        {
            var idEmpresaParameter = idEmpresa.HasValue ?
                new ObjectParameter("IdEmpresa", idEmpresa) :
                new ObjectParameter("IdEmpresa", typeof(int));
    
            var cnpjParameter = cnpj != null ?
                new ObjectParameter("Cnpj", cnpj) :
                new ObjectParameter("Cnpj", typeof(string));
    
            var numeroNotaParameter = numeroNota != null ?
                new ObjectParameter("NumeroNota", numeroNota) :
                new ObjectParameter("NumeroNota", typeof(string));
    
            var parcelaParameter = parcela.HasValue ?
                new ObjectParameter("Parcela", parcela) :
                new ObjectParameter("Parcela", typeof(int));
    
            var vencimentoParameter = vencimento.HasValue ?
                new ObjectParameter("Vencimento", vencimento) :
                new ObjectParameter("Vencimento", typeof(System.DateTime));
    
            var valorParcelaParameter = valorParcela.HasValue ?
                new ObjectParameter("ValorParcela", valorParcela) :
                new ObjectParameter("ValorParcela", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("stpFornecedoresNotasEntradasParcelas", idEmpresaParameter, cnpjParameter, numeroNotaParameter, parcelaParameter, vencimentoParameter, valorParcelaParameter);
        }
    
        public virtual int stpFornecedoresNotasEntradasProdutos(Nullable<int> idEmpresa, string cnpj, string numeroNota, string codigoFornecedor, string nomeProduto, string unidade, Nullable<decimal> quantidade, Nullable<decimal> valorUnitario, Nullable<decimal> valorDesconto, Nullable<decimal> valorTotal, string ncm, Nullable<decimal> mva, string cean, string cest, string cfop, string origem, string icmCst_CSOSN, string icmModBC, Nullable<decimal> icmBase, Nullable<decimal> icmPercentual, Nullable<decimal> icmValor, Nullable<decimal> icmBaseSt, Nullable<decimal> icmPercentualSt, Nullable<decimal> icmValorSt, Nullable<decimal> icmReducaoSt, Nullable<decimal> diferencaAliquota, string ipicEnq, string ipiCst, Nullable<decimal> ipiBC, Nullable<decimal> ipiPercentual, Nullable<decimal> ipiValor, string pisCst, Nullable<decimal> pisBC, Nullable<decimal> pisPercentual, Nullable<decimal> pisValor, string cofinsCst, Nullable<decimal> cofinsBC, Nullable<decimal> cofinsPercentual, Nullable<decimal> cofinsValor)
        {
            var idEmpresaParameter = idEmpresa.HasValue ?
                new ObjectParameter("IdEmpresa", idEmpresa) :
                new ObjectParameter("IdEmpresa", typeof(int));
    
            var cnpjParameter = cnpj != null ?
                new ObjectParameter("Cnpj", cnpj) :
                new ObjectParameter("Cnpj", typeof(string));
    
            var numeroNotaParameter = numeroNota != null ?
                new ObjectParameter("NumeroNota", numeroNota) :
                new ObjectParameter("NumeroNota", typeof(string));
    
            var codigoFornecedorParameter = codigoFornecedor != null ?
                new ObjectParameter("CodigoFornecedor", codigoFornecedor) :
                new ObjectParameter("CodigoFornecedor", typeof(string));
    
            var nomeProdutoParameter = nomeProduto != null ?
                new ObjectParameter("NomeProduto", nomeProduto) :
                new ObjectParameter("NomeProduto", typeof(string));
    
            var unidadeParameter = unidade != null ?
                new ObjectParameter("Unidade", unidade) :
                new ObjectParameter("Unidade", typeof(string));
    
            var quantidadeParameter = quantidade.HasValue ?
                new ObjectParameter("Quantidade", quantidade) :
                new ObjectParameter("Quantidade", typeof(decimal));
    
            var valorUnitarioParameter = valorUnitario.HasValue ?
                new ObjectParameter("ValorUnitario", valorUnitario) :
                new ObjectParameter("ValorUnitario", typeof(decimal));
    
            var valorDescontoParameter = valorDesconto.HasValue ?
                new ObjectParameter("ValorDesconto", valorDesconto) :
                new ObjectParameter("ValorDesconto", typeof(decimal));
    
            var valorTotalParameter = valorTotal.HasValue ?
                new ObjectParameter("ValorTotal", valorTotal) :
                new ObjectParameter("ValorTotal", typeof(decimal));
    
            var ncmParameter = ncm != null ?
                new ObjectParameter("Ncm", ncm) :
                new ObjectParameter("Ncm", typeof(string));
    
            var mvaParameter = mva.HasValue ?
                new ObjectParameter("Mva", mva) :
                new ObjectParameter("Mva", typeof(decimal));
    
            var ceanParameter = cean != null ?
                new ObjectParameter("Cean", cean) :
                new ObjectParameter("Cean", typeof(string));
    
            var cestParameter = cest != null ?
                new ObjectParameter("Cest", cest) :
                new ObjectParameter("Cest", typeof(string));
    
            var cfopParameter = cfop != null ?
                new ObjectParameter("Cfop", cfop) :
                new ObjectParameter("Cfop", typeof(string));
    
            var origemParameter = origem != null ?
                new ObjectParameter("Origem", origem) :
                new ObjectParameter("Origem", typeof(string));
    
            var icmCst_CSOSNParameter = icmCst_CSOSN != null ?
                new ObjectParameter("IcmCst_CSOSN", icmCst_CSOSN) :
                new ObjectParameter("IcmCst_CSOSN", typeof(string));
    
            var icmModBCParameter = icmModBC != null ?
                new ObjectParameter("IcmModBC", icmModBC) :
                new ObjectParameter("IcmModBC", typeof(string));
    
            var icmBaseParameter = icmBase.HasValue ?
                new ObjectParameter("IcmBase", icmBase) :
                new ObjectParameter("IcmBase", typeof(decimal));
    
            var icmPercentualParameter = icmPercentual.HasValue ?
                new ObjectParameter("IcmPercentual", icmPercentual) :
                new ObjectParameter("IcmPercentual", typeof(decimal));
    
            var icmValorParameter = icmValor.HasValue ?
                new ObjectParameter("IcmValor", icmValor) :
                new ObjectParameter("IcmValor", typeof(decimal));
    
            var icmBaseStParameter = icmBaseSt.HasValue ?
                new ObjectParameter("IcmBaseSt", icmBaseSt) :
                new ObjectParameter("IcmBaseSt", typeof(decimal));
    
            var icmPercentualStParameter = icmPercentualSt.HasValue ?
                new ObjectParameter("IcmPercentualSt", icmPercentualSt) :
                new ObjectParameter("IcmPercentualSt", typeof(decimal));
    
            var icmValorStParameter = icmValorSt.HasValue ?
                new ObjectParameter("IcmValorSt", icmValorSt) :
                new ObjectParameter("IcmValorSt", typeof(decimal));
    
            var icmReducaoStParameter = icmReducaoSt.HasValue ?
                new ObjectParameter("IcmReducaoSt", icmReducaoSt) :
                new ObjectParameter("IcmReducaoSt", typeof(decimal));
    
            var diferencaAliquotaParameter = diferencaAliquota.HasValue ?
                new ObjectParameter("DiferencaAliquota", diferencaAliquota) :
                new ObjectParameter("DiferencaAliquota", typeof(decimal));
    
            var ipicEnqParameter = ipicEnq != null ?
                new ObjectParameter("IpicEnq", ipicEnq) :
                new ObjectParameter("IpicEnq", typeof(string));
    
            var ipiCstParameter = ipiCst != null ?
                new ObjectParameter("IpiCst", ipiCst) :
                new ObjectParameter("IpiCst", typeof(string));
    
            var ipiBCParameter = ipiBC.HasValue ?
                new ObjectParameter("IpiBC", ipiBC) :
                new ObjectParameter("IpiBC", typeof(decimal));
    
            var ipiPercentualParameter = ipiPercentual.HasValue ?
                new ObjectParameter("IpiPercentual", ipiPercentual) :
                new ObjectParameter("IpiPercentual", typeof(decimal));
    
            var ipiValorParameter = ipiValor.HasValue ?
                new ObjectParameter("IpiValor", ipiValor) :
                new ObjectParameter("IpiValor", typeof(decimal));
    
            var pisCstParameter = pisCst != null ?
                new ObjectParameter("PisCst", pisCst) :
                new ObjectParameter("PisCst", typeof(string));
    
            var pisBCParameter = pisBC.HasValue ?
                new ObjectParameter("PisBC", pisBC) :
                new ObjectParameter("PisBC", typeof(decimal));
    
            var pisPercentualParameter = pisPercentual.HasValue ?
                new ObjectParameter("PisPercentual", pisPercentual) :
                new ObjectParameter("PisPercentual", typeof(decimal));
    
            var pisValorParameter = pisValor.HasValue ?
                new ObjectParameter("PisValor", pisValor) :
                new ObjectParameter("PisValor", typeof(decimal));
    
            var cofinsCstParameter = cofinsCst != null ?
                new ObjectParameter("CofinsCst", cofinsCst) :
                new ObjectParameter("CofinsCst", typeof(string));
    
            var cofinsBCParameter = cofinsBC.HasValue ?
                new ObjectParameter("CofinsBC", cofinsBC) :
                new ObjectParameter("CofinsBC", typeof(decimal));
    
            var cofinsPercentualParameter = cofinsPercentual.HasValue ?
                new ObjectParameter("CofinsPercentual", cofinsPercentual) :
                new ObjectParameter("CofinsPercentual", typeof(decimal));
    
            var cofinsValorParameter = cofinsValor.HasValue ?
                new ObjectParameter("CofinsValor", cofinsValor) :
                new ObjectParameter("CofinsValor", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("stpFornecedoresNotasEntradasProdutos", idEmpresaParameter, cnpjParameter, numeroNotaParameter, codigoFornecedorParameter, nomeProdutoParameter, unidadeParameter, quantidadeParameter, valorUnitarioParameter, valorDescontoParameter, valorTotalParameter, ncmParameter, mvaParameter, ceanParameter, cestParameter, cfopParameter, origemParameter, icmCst_CSOSNParameter, icmModBCParameter, icmBaseParameter, icmPercentualParameter, icmValorParameter, icmBaseStParameter, icmPercentualStParameter, icmValorStParameter, icmReducaoStParameter, diferencaAliquotaParameter, ipicEnqParameter, ipiCstParameter, ipiBCParameter, ipiPercentualParameter, ipiValorParameter, pisCstParameter, pisBCParameter, pisPercentualParameter, pisValorParameter, cofinsCstParameter, cofinsBCParameter, cofinsPercentualParameter, cofinsValorParameter);
        }
    
        public virtual int stpGeraNotasEntrada(Nullable<long> idNota)
        {
            var idNotaParameter = idNota.HasValue ?
                new ObjectParameter("IdNota", idNota) :
                new ObjectParameter("IdNota", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("stpGeraNotasEntrada", idNotaParameter);
        }
    
        public virtual int stpGeraNotasOrdemServico(Nullable<long> idOrdemServico)
        {
            var idOrdemServicoParameter = idOrdemServico.HasValue ?
                new ObjectParameter("IdOrdemServico", idOrdemServico) :
                new ObjectParameter("IdOrdemServico", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("stpGeraNotasOrdemServico", idOrdemServicoParameter);
        }
    
        public virtual int stpGeraNotasPedidos(Nullable<long> idPedido)
        {
            var idPedidoParameter = idPedido.HasValue ?
                new ObjectParameter("IdPedido", idPedido) :
                new ObjectParameter("IdPedido", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("stpGeraNotasPedidos", idPedidoParameter);
        }
    
        public virtual ObjectResult<Nullable<System.DateTime>> stpGerarNotaEntradaImportacao(Nullable<int> empresa, Nullable<int> numeroNota)
        {
            var empresaParameter = empresa.HasValue ?
                new ObjectParameter("Empresa", empresa) :
                new ObjectParameter("Empresa", typeof(int));
    
            var numeroNotaParameter = numeroNota.HasValue ?
                new ObjectParameter("NumeroNota", numeroNota) :
                new ObjectParameter("NumeroNota", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<System.DateTime>>("stpGerarNotaEntradaImportacao", empresaParameter, numeroNotaParameter);
        }
    
        public virtual int stpGerarNotasReferenciadas(Nullable<long> idNota)
        {
            var idNotaParameter = idNota.HasValue ?
                new ObjectParameter("IdNota", idNota) :
                new ObjectParameter("IdNota", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("stpGerarNotasReferenciadas", idNotaParameter);
        }
    
        public virtual int stpNotasFiscaisCalcular(Nullable<int> idNotaFiscal)
        {
            var idNotaFiscalParameter = idNotaFiscal.HasValue ?
                new ObjectParameter("IdNotaFiscal", idNotaFiscal) :
                new ObjectParameter("IdNotaFiscal", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("stpNotasFiscaisCalcular", idNotaFiscalParameter);
        }
    
        public virtual int stpOrcamentoCliente(Nullable<long> idOrcamento, Nullable<int> loja, Nullable<int> cliente)
        {
            var idOrcamentoParameter = idOrcamento.HasValue ?
                new ObjectParameter("IdOrcamento", idOrcamento) :
                new ObjectParameter("IdOrcamento", typeof(long));
    
            var lojaParameter = loja.HasValue ?
                new ObjectParameter("Loja", loja) :
                new ObjectParameter("Loja", typeof(int));
    
            var clienteParameter = cliente.HasValue ?
                new ObjectParameter("Cliente", cliente) :
                new ObjectParameter("Cliente", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("stpOrcamentoCliente", idOrcamentoParameter, lojaParameter, clienteParameter);
        }
    
        public virtual ObjectResult<stpRelatorioClientesemAberto_Result> stpRelatorioClientesemAberto(Nullable<int> idEmpresa, Nullable<System.DateTime> dataInicio, Nullable<System.DateTime> dataFim, Nullable<int> idCliente)
        {
            var idEmpresaParameter = idEmpresa.HasValue ?
                new ObjectParameter("IdEmpresa", idEmpresa) :
                new ObjectParameter("IdEmpresa", typeof(int));
    
            var dataInicioParameter = dataInicio.HasValue ?
                new ObjectParameter("DataInicio", dataInicio) :
                new ObjectParameter("DataInicio", typeof(System.DateTime));
    
            var dataFimParameter = dataFim.HasValue ?
                new ObjectParameter("DataFim", dataFim) :
                new ObjectParameter("DataFim", typeof(System.DateTime));
    
            var idClienteParameter = idCliente.HasValue ?
                new ObjectParameter("IdCliente", idCliente) :
                new ObjectParameter("IdCliente", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<stpRelatorioClientesemAberto_Result>("stpRelatorioClientesemAberto", idEmpresaParameter, dataInicioParameter, dataFimParameter, idClienteParameter);
        }
    
        public virtual ObjectResult<stpRelatorioClientesPagas_Result> stpRelatorioClientesPagas(Nullable<int> idEmpresa, Nullable<System.DateTime> dataInicio, Nullable<System.DateTime> dataFim, Nullable<int> idCliente)
        {
            var idEmpresaParameter = idEmpresa.HasValue ?
                new ObjectParameter("IdEmpresa", idEmpresa) :
                new ObjectParameter("IdEmpresa", typeof(int));
    
            var dataInicioParameter = dataInicio.HasValue ?
                new ObjectParameter("DataInicio", dataInicio) :
                new ObjectParameter("DataInicio", typeof(System.DateTime));
    
            var dataFimParameter = dataFim.HasValue ?
                new ObjectParameter("DataFim", dataFim) :
                new ObjectParameter("DataFim", typeof(System.DateTime));
    
            var idClienteParameter = idCliente.HasValue ?
                new ObjectParameter("IdCliente", idCliente) :
                new ObjectParameter("IdCliente", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<stpRelatorioClientesPagas_Result>("stpRelatorioClientesPagas", idEmpresaParameter, dataInicioParameter, dataFimParameter, idClienteParameter);
        }
    
        public virtual ObjectResult<stpRelatorioComissao_Result> stpRelatorioComissao(Nullable<System.DateTime> dataini, Nullable<System.DateTime> datafim, Nullable<int> idVendedor)
        {
            var datainiParameter = dataini.HasValue ?
                new ObjectParameter("Dataini", dataini) :
                new ObjectParameter("Dataini", typeof(System.DateTime));
    
            var datafimParameter = datafim.HasValue ?
                new ObjectParameter("Datafim", datafim) :
                new ObjectParameter("Datafim", typeof(System.DateTime));
    
            var idVendedorParameter = idVendedor.HasValue ?
                new ObjectParameter("IdVendedor", idVendedor) :
                new ObjectParameter("IdVendedor", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<stpRelatorioComissao_Result>("stpRelatorioComissao", datainiParameter, datafimParameter, idVendedorParameter);
        }
    
        public virtual ObjectResult<stpRelatorioFornecedoresemAberto_Result> stpRelatorioFornecedoresemAberto(Nullable<int> idEmpresa, Nullable<System.DateTime> dataInicio, Nullable<System.DateTime> dataFim, Nullable<int> idFornecedor)
        {
            var idEmpresaParameter = idEmpresa.HasValue ?
                new ObjectParameter("IdEmpresa", idEmpresa) :
                new ObjectParameter("IdEmpresa", typeof(int));
    
            var dataInicioParameter = dataInicio.HasValue ?
                new ObjectParameter("DataInicio", dataInicio) :
                new ObjectParameter("DataInicio", typeof(System.DateTime));
    
            var dataFimParameter = dataFim.HasValue ?
                new ObjectParameter("DataFim", dataFim) :
                new ObjectParameter("DataFim", typeof(System.DateTime));
    
            var idFornecedorParameter = idFornecedor.HasValue ?
                new ObjectParameter("IdFornecedor", idFornecedor) :
                new ObjectParameter("IdFornecedor", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<stpRelatorioFornecedoresemAberto_Result>("stpRelatorioFornecedoresemAberto", idEmpresaParameter, dataInicioParameter, dataFimParameter, idFornecedorParameter);
        }
    
        public virtual ObjectResult<stpRelatorioFornecedoresPagas_Result> stpRelatorioFornecedoresPagas(Nullable<int> idEmpresa, Nullable<System.DateTime> dataInicio, Nullable<System.DateTime> dataFim, Nullable<int> idFornecedor)
        {
            var idEmpresaParameter = idEmpresa.HasValue ?
                new ObjectParameter("IdEmpresa", idEmpresa) :
                new ObjectParameter("IdEmpresa", typeof(int));
    
            var dataInicioParameter = dataInicio.HasValue ?
                new ObjectParameter("DataInicio", dataInicio) :
                new ObjectParameter("DataInicio", typeof(System.DateTime));
    
            var dataFimParameter = dataFim.HasValue ?
                new ObjectParameter("DataFim", dataFim) :
                new ObjectParameter("DataFim", typeof(System.DateTime));
    
            var idFornecedorParameter = idFornecedor.HasValue ?
                new ObjectParameter("IdFornecedor", idFornecedor) :
                new ObjectParameter("IdFornecedor", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<stpRelatorioFornecedoresPagas_Result>("stpRelatorioFornecedoresPagas", idEmpresaParameter, dataInicioParameter, dataFimParameter, idFornecedorParameter);
        }
    
        public virtual ObjectResult<stpRelatorioMovimentoEstoque_Result> stpRelatorioMovimentoEstoque(Nullable<System.DateTime> dataInicio, Nullable<System.DateTime> dataFim, string codigoProduto, Nullable<int> empresa)
        {
            var dataInicioParameter = dataInicio.HasValue ?
                new ObjectParameter("DataInicio", dataInicio) :
                new ObjectParameter("DataInicio", typeof(System.DateTime));
    
            var dataFimParameter = dataFim.HasValue ?
                new ObjectParameter("DataFim", dataFim) :
                new ObjectParameter("DataFim", typeof(System.DateTime));
    
            var codigoProdutoParameter = codigoProduto != null ?
                new ObjectParameter("CodigoProduto", codigoProduto) :
                new ObjectParameter("CodigoProduto", typeof(string));
    
            var empresaParameter = empresa.HasValue ?
                new ObjectParameter("Empresa", empresa) :
                new ObjectParameter("Empresa", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<stpRelatorioMovimentoEstoque_Result>("stpRelatorioMovimentoEstoque", dataInicioParameter, dataFimParameter, codigoProdutoParameter, empresaParameter);
        }
    
        public virtual int stpRelatorioOrcamentos(Nullable<int> idEmpresa, Nullable<int> idVendedor, Nullable<System.DateTime> dataInicial, Nullable<System.DateTime> dataFinal)
        {
            var idEmpresaParameter = idEmpresa.HasValue ?
                new ObjectParameter("IdEmpresa", idEmpresa) :
                new ObjectParameter("IdEmpresa", typeof(int));
    
            var idVendedorParameter = idVendedor.HasValue ?
                new ObjectParameter("IdVendedor", idVendedor) :
                new ObjectParameter("IdVendedor", typeof(int));
    
            var dataInicialParameter = dataInicial.HasValue ?
                new ObjectParameter("dataInicial", dataInicial) :
                new ObjectParameter("dataInicial", typeof(System.DateTime));
    
            var dataFinalParameter = dataFinal.HasValue ?
                new ObjectParameter("dataFinal", dataFinal) :
                new ObjectParameter("dataFinal", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("stpRelatorioOrcamentos", idEmpresaParameter, idVendedorParameter, dataInicialParameter, dataFinalParameter);
        }
    
        public virtual int stpRelatorioPedidos(Nullable<int> idEmpresa, Nullable<int> idVendedor, Nullable<System.DateTime> dataInicial, Nullable<System.DateTime> dataFinal)
        {
            var idEmpresaParameter = idEmpresa.HasValue ?
                new ObjectParameter("IdEmpresa", idEmpresa) :
                new ObjectParameter("IdEmpresa", typeof(int));
    
            var idVendedorParameter = idVendedor.HasValue ?
                new ObjectParameter("IdVendedor", idVendedor) :
                new ObjectParameter("IdVendedor", typeof(int));
    
            var dataInicialParameter = dataInicial.HasValue ?
                new ObjectParameter("dataInicial", dataInicial) :
                new ObjectParameter("dataInicial", typeof(System.DateTime));
    
            var dataFinalParameter = dataFinal.HasValue ?
                new ObjectParameter("dataFinal", dataFinal) :
                new ObjectParameter("dataFinal", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("stpRelatorioPedidos", idEmpresaParameter, idVendedorParameter, dataInicialParameter, dataFinalParameter);
        }
    
        public virtual int stpRelatorios()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("stpRelatorios");
        }
    
        [DbFunction("TaylorEntities", "fnRelatorioPedidosProfissionais")]
        public virtual IQueryable<fnRelatorioPedidosProfissionais_Result> fnRelatorioPedidosProfissionais(Nullable<System.DateTime> dataInicio, Nullable<System.DateTime> dataFim, Nullable<int> idEmpresa, Nullable<int> idProfissional)
        {
            var dataInicioParameter = dataInicio.HasValue ?
                new ObjectParameter("DataInicio", dataInicio) :
                new ObjectParameter("DataInicio", typeof(System.DateTime));
    
            var dataFimParameter = dataFim.HasValue ?
                new ObjectParameter("DataFim", dataFim) :
                new ObjectParameter("DataFim", typeof(System.DateTime));
    
            var idEmpresaParameter = idEmpresa.HasValue ?
                new ObjectParameter("IdEmpresa", idEmpresa) :
                new ObjectParameter("IdEmpresa", typeof(int));
    
            var idProfissionalParameter = idProfissional.HasValue ?
                new ObjectParameter("IdProfissional", idProfissional) :
                new ObjectParameter("IdProfissional", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnRelatorioPedidosProfissionais_Result>("[TaylorEntities].[fnRelatorioPedidosProfissionais](@DataInicio, @DataFim, @IdEmpresa, @IdProfissional)", dataInicioParameter, dataFimParameter, idEmpresaParameter, idProfissionalParameter);
        }
    
        [DbFunction("TaylorEntities", "fnRelatorioEstoque")]
        public virtual IQueryable<fnRelatorioEstoque_Result> fnRelatorioEstoque(Nullable<System.DateTime> dataInicio, Nullable<System.DateTime> dataFim, string codigoProduto, Nullable<int> empresa)
        {
            var dataInicioParameter = dataInicio.HasValue ?
                new ObjectParameter("DataInicio", dataInicio) :
                new ObjectParameter("DataInicio", typeof(System.DateTime));
    
            var dataFimParameter = dataFim.HasValue ?
                new ObjectParameter("DataFim", dataFim) :
                new ObjectParameter("DataFim", typeof(System.DateTime));
    
            var codigoProdutoParameter = codigoProduto != null ?
                new ObjectParameter("CodigoProduto", codigoProduto) :
                new ObjectParameter("CodigoProduto", typeof(string));
    
            var empresaParameter = empresa.HasValue ?
                new ObjectParameter("Empresa", empresa) :
                new ObjectParameter("Empresa", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnRelatorioEstoque_Result>("[TaylorEntities].[fnRelatorioEstoque](@DataInicio, @DataFim, @CodigoProduto, @Empresa)", dataInicioParameter, dataFimParameter, codigoProdutoParameter, empresaParameter);
        }
    
        public virtual int stpAlteraClientesNotasServicos1(Nullable<long> idNota)
        {
            var idNotaParameter = idNota.HasValue ?
                new ObjectParameter("IdNota", idNota) :
                new ObjectParameter("IdNota", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("stpAlteraClientesNotasServicos1", idNotaParameter);
        }
    
        public virtual int stpClientesServicosImportar1(Nullable<long> idOrdemServico)
        {
            var idOrdemServicoParameter = idOrdemServico.HasValue ?
                new ObjectParameter("IdOrdemServico", idOrdemServico) :
                new ObjectParameter("IdOrdemServico", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("stpClientesServicosImportar1", idOrdemServicoParameter);
        }
    }
}
